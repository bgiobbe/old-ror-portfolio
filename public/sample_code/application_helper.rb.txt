###
# SAMPLE CODE: All mine except where marked "LEGACY CODE"
###

# Methods added to this helper will be available to all templates in the
# application.
module ApplicationHelper

  #---------------
  # About the User
  #---------------

  # Return true if current user is Admin
  def user_is_admin?
    !@current_user.admin_id.nil?
  end

  # Return true if current user is a primary coordinator
  def user_is_primary_coordinator?
    @current_user.coordinator && @current_user.coordinator.primary_role == 1
  end

  # Return true if current user is a coordinator
  def user_is_coordinator?
    @current_user.role.eql?('coordinator')
  end

  # Return true if current user is a teacher only
  def user_is_teacher?
    @current_user.role.eql?('teacher')
  end

  # Return true if current user is a student
  def user_is_student?
    @current_user.role.eql?('student')
  end

  # Return user's School (or School admin requested)
  def users_school
    case
    when user_is_student?
      @current_user.student.school
    when user_is_teacher?
      @current_user.teacher.school
    when user_is_coordinator?
      @current_user.coordinator.school
    when user_is_admin?
      params[:school_id].nil? ? nil :
        School.first(:conditions => {:id => params[:school_id]})
    # else unauthorized access? Shouldn't get here.
    end
  end

  #---------------------------
  # Paging and Sorting helpers
  #---------------------------

  # Return the number of items per page (will_paginate)
  # Limit items per page to 1 <= limit <= 200
  def items_per_page(default=25)
    min_per_page, max_per_page = 1, 200
    requested = params[:per_page].nil? || params[:per_page].size.zero? ?
        default : params[:per_page].to_i
    return [ min_per_page, [requested, max_per_page].min ].max
  end

  # Return the requested page number (will_paginate)
  def page_number
    params[:page].nil? || params[:page].size.zero? ? 1 : params[:page].to_i
  end

  # Create column heading for a bidirectional sortable column
  # on a paged (offset, limit) table
  def sortable(column, title)
    css_class = (column == sort_column) ? "current #{sort_direction}" : nil
    direction = (column == sort_column) && (sort_direction == "asc") ?
    "desc" : "asc"
    link_to(title, {:overwrite_params => {
            :sort => column, :direction => direction, :page => 1}},
        {:class => css_class})
  end

  # sort_column must be defined in each controller that uses it.

  # Return the direction to sort - ascending or descending
  def sort_direction
    %w[asc desc].include?(params[:direction]) ? params[:direction] : "asc"
  end

### LEGACY CODE ---------------------------

  def display_crumbs
    s = ""
    url = request.path.split('?')  #remove extra query string parameters
    levels = url[0].split('/') #break up url into different levels
    levels.each_with_index do |level, index|
      unless level.blank?
	    if level == 'courses'
		  to_display = 'classes'
		elsif level == 'employees'
		  to_display = 'personnel'
		elsif level == 'coordinators'
		  to_display = 'personnel'
		else
		  to_display = level
		end
	    #skip level all-together
		if (index == 1 && level == 'students') or (level == 'schools' && !(@current_user.role == 'admin')) or (index == 1 && level == 'home')
		  s += ""
        elsif index == levels.size-1 or level == 'background' or (index == 1 && level == 'backgrounds')
          s += "<li>#{to_display.gsub(/_/, ' ')}</li>\n"
		# display as text only, no link
		elsif (@current_user.role == 'teacher' && level == 'teachers') or (index == 2 && @current_user.role == 'teacher')
		  s += "<li>#{to_display.gsub(/_/, ' ')} /</li>\n"
        else
          link = "/"
          i = 1
          while i <= index
		    # only replace coordinators in URL with personnel if displaying it as last e.g., schools/personnel.  schools/personnel/2-wohlers should be schools/coordinators/2-wohlers
		    #RAILS_DEFAULT_LOGGER.debug("i = #{i} LEVEL = #{levels[i]} SIZE = #{levels.size} INDEX = #{index}")
			if levels[i] == 'coordinators' and i == 3 and index == 3
			  RAILS_DEFAULT_LOGGER.debug("HERE!!")
			  link += "employees/"
			else
              link += "#{levels[i]}/"
			end
            i+=1
          end
	      s += "<li><a href=\"#{link}\">#{to_display.gsub(/_/, ' ')}</a> /</li>\n"
	      #display status crumb if supposed to after school
	      if index == 2 && @status_crumb
	        s += "<li><a href=\"#{link}status\">status</a> /</li>\n"
          end
        end
      end
    end
    return s
  end

  def display_percentile(percentile)
    # if percentile.to_s.to_i < 45
      # new_percentile = " "
    # else
    if percentile.to_s.last == '0'
      new_percentile = percentile.to_s + " th"
    elsif percentile.to_s.last == '1'
      new_percentile = percentile.to_s + " st"
    elsif percentile.to_s.last == '2'
      new_percentile = percentile.to_s + " nd"
    elsif percentile.to_s.last == '3'
      new_percentile = percentile.to_s + " rd"
    elsif percentile.to_s.last == '4'
      new_percentile = percentile.to_s + " th"
    elsif percentile.to_s.last == '5'
      new_percentile = percentile.to_s + " th"
    elsif percentile.to_s.last == '6'
      new_percentile = percentile.to_s + " th"
    elsif percentile.to_s.last == '7'
      new_percentile = percentile.to_s + " th"
    elsif percentile.to_s.last == '8'
      new_percentile = percentile.to_s + " th"
    elsif percentile.to_s.last == '9'
      new_percentile = percentile.to_s + " th"
    else
      new_percentile = percentile.to_s
    end
    # end

    return new_percentile
  end
  
### End of LEGACY CODE

end
